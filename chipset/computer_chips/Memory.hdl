// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // If address[14] == 0 -> access the RAM
    // Else if address[13] == 0 -> access the screen
    // Else -> access the Keyboard

    And16(
        a[0..14]=address, 
        b[0..14]=address, 
        out[0..13]=MemoryAddress,
        out[0..12]=ScreenAddress,
        out[14]=RAMScreenSelector,
        out[13]=KeyboardSelector
    );

    Not(
        in=RAMScreenSelector, 
        out=RAMselector
    );

    And(
        a=RAMselector, 
        b=load, 
        out=RAMload);

    And(
        a=address[14], 
        b=load, 
        out=Screenload);

    // Data Memory
    RAM16K(
    	in=in, 
    	load=RAMload, 
    	address=MemoryAddress,
    	out=RAM16KOut
    );

    // Screen
    Screen(
    	in=in, 
    	load=Screenload, 
    	address=ScreenAddress, 			// 13-bit bus
    	out=ScreenOut);

    // Keyboard
    Keyboard(out=KeyboardOut);

    // Select which output to push. 
    // We can do it according to this schema:
    //
    //  address[14] aka     |   address[13] aka     |            |
    // RAMScreenSelector    |   KeyboardSelector    |   output   |
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //      0               |           0           |   RAM      |
    //      0               |           1           |   RAM      |
    //      1               |           0           |   Screen   |
    //      1               |           1           |   Keyboard |
    Mux4Way16(
        a=RAM16KOut, 
        b=RAM16KOut, 
        c=ScreenOut, 
        d=KeyboardOut, 
        sel[0]=KeyboardSelector,        // address[13]
        sel[1]=RAMScreenSelector,       // address[14]
        out=out);
}