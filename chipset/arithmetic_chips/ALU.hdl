// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    // Notes:
    // 1. Can combine the zx nx into a Mux4Way16 gate. Ergo for zy, ny
    PARTS:
       // if (zx == 1) set x = 0 
       Mux16(a=x, b=false, sel=zx, out=Mux16x); 

       // if (nx == 1) set x = !x 
       Not16(in=Mux16x, out=Not16Mux16x);     
       Mux16(a=Mux16x, b= Not16Mux16x, sel=nx, out=processedx);

       // if (zy == 1) set y = 0 
       Mux16(a=y, b=false, sel=zy, out=Mux16y); 

       // if (ny == 1) set y = !y 
       Not16(in=Mux16y, out=NotMux16y);
       Mux16(a=Mux16y, b= NotMux16y, sel=ny, out=processedy); 

       // if (f == 1)  set out = x + y
       // if (f == 0)  set out = x & y
       Add16(a=processedx, b=processedy, out=Add16xy);
       And16(a=processedx, b=processedy, out=And16xy);
       Mux16(a=And16xy, b=Add16xy, sel=f, out=fxy);

       // if (no == 1) set out = !out
       Not16(in=fxy, out=Not16fxy);
       Mux16(
        a=fxy, 
        b=Not16fxy, 
        sel=no, 
        out[15]=ng, 
        out[0..7]=outlow8, 
        out[8..15]=outhigh8, 
        out=out);    // Split the output 

       // if (out == 0) set zr = 1
       // We can or all the values together. Since we have only implemented Or8way, we have split up the output earlier 
       // into two 8bit parts, namely outlow8 and outhigh8.
       Or8Way(in=outlow8, out=Orlow8);
       Or8Way(in=outhigh8, out=Orhigh8);
       Or(a=Orlow8, b=Orhigh8, out=isitzero); // This is 0 iff. every bit is 0 (i.e. out=0)
       Not(in=isitzero, out=zr);

}